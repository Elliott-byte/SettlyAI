name: BE_CD
on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # 1) 查找目标 EC2（按 Name 标签，且需处于 running）
      - name: Find EC2 instance
        id: ec2
        run: |
          set -euo pipefail
          echo "Looking for EC2 tagged Name=${{ secrets.AWS_EC2_NAME }}..."
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ secrets.AWS_EC2_NAME }}" "Name=instance-state-name,Values=running" \
            --region $AWS_REGION \
            --query "Reservations[].Instances[0].InstanceId" \
            --output text)
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
            echo "❌ No running instance found by that Name tag."
            exit 1
          fi
          echo "Found EC2 instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      # 2) 等待实例在 SSM 中注册为受管
      - name: Wait for SSM registration
        run: |
          set -euo pipefail
          echo "Waiting for EC2 to register with SSM..."
          for i in {1..10}; do
            MATCHED=$(aws ssm describe-instance-information \
              --region $AWS_REGION \
              --query "InstanceInformationList[?InstanceId=='$INSTANCE_ID']" \
              --output text)
            if [ -n "$MATCHED" ]; then
              echo "✅ EC2 instance registered with SSM!"
              exit 0
            fi
            echo "⏳ Not yet registered... retry in 5 seconds"
            sleep 5
          done
          echo "❌ EC2 instance did not register with SSM in time."
          exit 1

      # 3) 生成要在 EC2 上执行的 bash 脚本（安装 Docker + 登录 ECR + 拉镜像 + 运行容器 + 基本自检）
      - name: Build remote deploy script
        id: build-script
        run: |
          set -euo pipefail
          cat > /tmp/deploy-backend.sh <<'BASH'
          set -Eeuo pipefail

          echo "=== Detect/Install Docker ==="
          if ! command -v docker >/dev/null 2>&1; then
            if [ -f /etc/debian_version ]; then
              apt-get update -y && apt-get install -y docker.io && systemctl enable --now docker
            elif [ -f /etc/amazon-linux-release ] || [ -f /etc/redhat-release ]; then
              (yum install -y docker || dnf install -y docker) && (systemctl enable --now docker || service docker start)
            else
              echo "Unsupported Linux distro"; exit 1
            fi
          else
            echo "Docker already installed"
          fi

          echo "=== ECR Login ==="
          ECR_REGISTRY="${ECR_REGISTRY}"
          REGION="${AWS_REGION}"
          ECR_HOST=$(echo "$ECR_REGISTRY" | awk -F/ '{print $1}')
          aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ECR_HOST"

          echo "=== Pull & Run Container ==="
          IMAGE="${ECR_REGISTRY}:latest"
          docker pull "$IMAGE"
          docker rm -f backend || true
          docker run -d --name backend --restart unless-stopped -p 5100:5100 -e ASPNETCORE_ENVIRONMENT=Production "$IMAGE"

          echo "=== Post-Checks ==="
          docker ps
          ss -tulnp | grep :5100 || true
          docker logs --tail 100 backend || true

          # 如有健康检查路由，取消下一行注释可强约束：
          # curl -fsS http://localhost:5100/health
          BASH
          echo "script_path=/tmp/deploy-backend.sh" >> "$GITHUB_OUTPUT"

      # 4) 用 jq 把脚本打包为 SSM 的 parameters JSON（commands=["bash -lc \"...\""]）
      - name: Build SSM parameters JSON
        id: build-params
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          ESCAPED=$(sed 's/"/\\"/g' "${{ steps.build-script.outputs.script_path }}" | awk '{printf "%s\\n", $0}')
          WRAPPED="bash -lc \"${ESCAPED}\""
          jq -n --arg cmd "$WRAPPED" '{commands: [$cmd]}' > /tmp/ssm-params.json
          echo "params_path=/tmp/ssm-params.json" >> "$GITHUB_OUTPUT"

      # 5) 发送 SSM 指令
      - name: Send SSM command
        id: send
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          set -euo pipefail
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --region "$AWS_REGION" \
            --instance-ids "$INSTANCE_ID" \
            --comment "Install Docker if missing and deploy backend container" \
            --parameters file://${{ steps.build-params.outputs.params_path }} \
            --query "Command.CommandId" --output text)
          echo "SSM CommandId: $CMD_ID"
          echo "cmd_id=$CMD_ID" >> "$GITHUB_OUTPUT"

      # 6) 轮询并打印执行结果（stdout/stderr），失败则让 Job 失败
      - name: Wait & fetch output
        run: |
          set -euo pipefail
          CMD_ID="${{ steps.send.outputs.cmd_id }}"
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region "$AWS_REGION" \
              --query "Status" --output text || true)
            echo "Invocation status: $STATUS"
            case "$STATUS" in
              Success|Cancelled|TimedOut|Failed) break ;;
              *) sleep 5 ;;
            esac
          done

          echo "===== STDOUT ====="
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE_ID" \
            --region "$AWS_REGION" \
            --query "StandardOutputContent" --output text || true

          echo "===== STDERR ====="
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE_ID" \
            --region "$AWS_REGION" \
            --query "StandardErrorContent" --output text || true

          if [ "$STATUS" != "Success" ]; then
            echo "SSM command finished with status: $STATUS"
            exit 1
          fi

      # 7) （可选）从公网/ALB 再做一次健康探测
      # - name: External health probe (optional)
      #   run: |
      #     set -euo pipefail
      #     curl -f http://<你的域名或公网IP>:5100/health